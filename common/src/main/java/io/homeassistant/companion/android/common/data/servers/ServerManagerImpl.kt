package io.homeassistant.companion.android.common.data.servers

import io.homeassistant.companion.android.common.data.authentication.AuthenticationRepository
import io.homeassistant.companion.android.common.data.authentication.AuthenticationRepositoryFactory
import io.homeassistant.companion.android.common.data.integration.IntegrationRepository
import io.homeassistant.companion.android.common.data.integration.IntegrationRepositoryFactory
import io.homeassistant.companion.android.common.data.servers.ServerManager.Companion.SERVER_ID_ACTIVE
import io.homeassistant.companion.android.common.data.websocket.WebSocketRepository
import io.homeassistant.companion.android.common.data.websocket.WebSocketRepositoryFactory
import io.homeassistant.companion.android.common.data.wifi.WifiHelper
import io.homeassistant.companion.android.database.server.Server
import io.homeassistant.companion.android.database.server.ServerDao
import io.homeassistant.companion.android.database.server.ServerType
import io.homeassistant.companion.android.database.settings.SettingsDao
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch
import javax.inject.Inject
import kotlin.math.min

class ServerManagerImpl @Inject constructor(
    private val authenticationRepositoryFactory: AuthenticationRepositoryFactory,
    private val integrationRepositoryFactory: IntegrationRepositoryFactory,
    private val webSocketRepositoryFactory: WebSocketRepositoryFactory,
    private val serverDao: ServerDao,
    private val settingsDao: SettingsDao,
    private val wifiHelper: WifiHelper
) : ServerManager {

    private val ioScope = CoroutineScope(Dispatchers.IO + Job())

    private val _servers = mutableMapOf<Int, Server>()

    private val authenticationRepos = mutableMapOf<Int, AuthenticationRepository>()
    private val integrationRepos = mutableMapOf<Int, IntegrationRepository>()
    private val webSocketRepos = mutableMapOf<Int, WebSocketRepository>()

    private val illegalServerException = IllegalArgumentException("No server for ID")

    override val defaultServers: List<Server>
        get() = _servers.values.filter { it.type == ServerType.DEFAULT }.toList()

    init {
        ioScope.launch {
            serverDao.getAll().collect { servers ->
                _servers
                    .filter {
                        it.value.type == ServerType.DEFAULT &&
                            it.key !in servers.map { server -> server.id }
                    }
                    .forEach {
                        removeServerFromManager(it.key)
                    }
                servers.forEach {
                    _servers[it.id] = it.apply { connection.wifiHelper = wifiHelper }
                }
            }
        }
    }

    override fun isRegistered(): Boolean =
        _servers.values.any { it.type == ServerType.DEFAULT && it.connection.isRegistered() }

    override suspend fun addServer(server: Server): Int {
        val newServer = server.copy(
            id = when (server.type) {
                ServerType.TEMPORARY -> min(-2, (_servers.keys.minOrNull() ?: 0) - 1)
                else -> 0 // Use autogenerated ID
            }
        )
        return if (server.type == ServerType.DEFAULT) {
            serverDao.add(newServer).toInt()
        } else {
            _servers[newServer.id] = newServer.apply { connection.wifiHelper = wifiHelper }
            newServer.id
        }
    }

    private fun activeServerId(): Int? = _servers.keys.maxOfOrNull { it } // TODO proper active server management

    override fun getServer(id: Int): Server? {
        val serverId = if (id == SERVER_ID_ACTIVE) activeServerId() else id
        return serverId?.let { _servers[serverId] ?: serverDao.get(serverId) }
    }

    override fun getServer(webhookId: String): Server? =
        _servers.values.firstOrNull { it.connection.webhookId == webhookId }

    override fun updateServer(server: Server) {
        _servers[server.id] = server.apply { connection.wifiHelper = wifiHelper }
        if (server.type == ServerType.DEFAULT) {
            ioScope.launch { serverDao.update(server) }
        }
    }

    override suspend fun convertTemporaryServer(id: Int): Int? {
        return _servers[id]?.let { server ->
            if (server.type != ServerType.TEMPORARY) return null

            val newServer = server.copy(id = 0) // Use autogenerated ID
            removeServer(id)
            serverDao.add(newServer).toInt()
        }
    }

    override suspend fun removeServer(id: Int) {
        removeServerFromManager(id)
        settingsDao.delete(id)
        serverDao.delete(id)
    }

    private fun removeServerFromManager(id: Int) {
        authenticationRepos.remove(id)
        integrationRepos.remove(id)
        webSocketRepos[id]?.shutdown()
        webSocketRepos.remove(id)
        _servers.remove(id)
    }

    override fun authenticationRepository(serverId: Int): AuthenticationRepository {
        val id = if (serverId == SERVER_ID_ACTIVE) activeServerId() else serverId
        return authenticationRepos[id] ?: run {
            if (id == null || _servers[id] == null) throw illegalServerException
            authenticationRepos[id] = authenticationRepositoryFactory.create(id)
            authenticationRepos[id]!!
        }
    }

    override fun integrationRepository(serverId: Int): IntegrationRepository {
        val id = if (serverId == SERVER_ID_ACTIVE) activeServerId() else serverId
        return integrationRepos[id] ?: run {
            if (id == null || _servers[id] == null) throw illegalServerException
            integrationRepos[id] = integrationRepositoryFactory.create(id)
            integrationRepos[id]!!
        }
    }

    override fun webSocketRepository(serverId: Int): WebSocketRepository {
        val id = if (serverId == SERVER_ID_ACTIVE) activeServerId() else serverId
        return webSocketRepos[id] ?: run {
            if (id == null || _servers[id] == null) throw illegalServerException
            webSocketRepos[id] = webSocketRepositoryFactory.create(id)
            webSocketRepos[id]!!
        }
    }
}
